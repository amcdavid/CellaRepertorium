% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pairing-methods.R
\name{canonicalize_cell}
\alias{canonicalize_cell}
\title{Find a canonical contig to represent a cell}
\usage{
canonicalize_cell(ccdb, contig_filter_args, tie_break_keys = c("umis",
  "reads"), contig_fields = tie_break_keys, order = 1)
}
\arguments{
\item{ccdb}{`ContigCellDB`}

\item{contig_filter_args}{an expression passed to dplyr::filter.  Unlike `filter`, multiple criteria must be `&` together, rather than using commas to separate.
that act on `ccdb$contig_tbl``}

\item{tie_break_keys}{(optional) `character` naming fields in `contig_tbl`
that are used sort the contig table in descending order.
Used to break ties if `contig_filter_args` does not return a unique contig
for each cluster}

\item{contig_fields}{Optional fields from `contig_tbl` that will be copied into
the `cluster_tbl` from the canonical contig.}

\item{order}{The rank order of the contig, based on `tie_break_keys`
to return}
}
\value{
`ContigCellDB` with additional fields in `cell_tbl`
}
\description{
Using filtering in `...` and sorting in `tie_break_keys` and `order` find a
single, canonical contig to represent each cell
Fields in `contig_fields` will be copied over to the `cell_tbl`.
}
\examples{
# Report beta chain with highest umi-count, breaking ties with reads
beta = canonicalize_cell(ccdb_ex, chain == 'TRB',
tie_break_keys = c('umis', 'reads'),
contig_fields = c('umis', 'reads', 'chain', 'v_gene', 'd_gene', 'j_gene'))
head(beta$cell_tbl)

# Only adds fields to `cell_tbl`
stopifnot(all.equal(beta$cell_tbl[ccdb_ex$cell_pk],
ccdb_ex$cell_tbl[ccdb_ex$cell_pk]))

#Report cdr3 with highest UMI count, but only when > 5 UMIs support it
umi5 = canonicalize_cell(ccdb_ex, umis > 5,
tie_break_keys = c('umis', 'reads'), contig_fields = c('umis', 'cdr3'))
stopifnot(all(umi5$cell_tbl$umis > 5, na.rm = TRUE))
}
\seealso{
canonicalize_cluster
}
